// #include "watchRainData.h"

// std::vector<rainData_t1234567890> rainData1234567890;

// unsigned long lastSucessfulRainDataRequest1234567890 = 0;
// unsigned long lastRainDataRequestAttempt1234567890 = 0;

// void handleWatchRainData1234567890()
// {
//     if(!(millis() - lastSucessfulRainDataRequest1234567890 > timeBetweenSucessfulRainDataRequest1234567890))
//         return;

//     lastRainDataRequestAttempt1234567890 = millis();

//     if(!(millis() - lastRainDataRequestAttempt1234567890 > timeBetweenRainDataRequestAttemps1234567890))
//         return;
        
//     LOGprint(getStrDateTime());
//     LOGprintln(" Get rain attempt");
    
//     if(updateRainData1234567890())
//         lastSucessfulRainDataRequest1234567890 = lastRainDataRequestAttempt1234567890;
// }

// bool updateRainData1234567890()
// {
//     // if(!isConnectedToWifi()) return false;

//     // #define TEST_HOST "www.ciiagro.org.br"
//     // if (!client_asdasdasd.connect(TEST_HOST, 80))
//     // {
//     //     RPprintln(F("Could not update rain data, connection failed"));
//     //     return false;
//     // }

//     // yield();

//     // // Send HTTP request
//     // client_asdasdasd.print(F("GET "));
//     // // This is the second half of a request (everything that comes after the base URL)
//     // client_asdasdasd.print("/ema/index.php?id=63"); // %2C == ,
//     // client_asdasdasd.println(F(" HTTP/1.1"));

//     // //Headers
//     // client_asdasdasd.print(F("Host: "));
//     // client_asdasdasd.println(TEST_HOST);

//     // client_asdasdasd.println(F("Cache-Control: no-cache"));

//     // // need to add this header, it does not make sense but without it ciiagro.com send the data for the wrong city
//     // // the city selected below does not matter, just the one in the request.
//     // client_asdasdasd.println(F("Referer: http://www.ciiagro.org.br/ema/index.php?id=63"));

//     // if (client_asdasdasd.println() == 0)
//     // {
//     //     RPprintln(F("Could not update rain data, failed to send request"));
//     //     return false;
//     // }
//     // //delay(100);
//     // // Check HTTP status
//     // char status[32] = {0};
//     // client_asdasdasd.readBytesUntil('\r', status, sizeof(status));
//     // if (strcmp(status, "HTTP/1.1 200 OK") != 0)
//     // {
//     //     RPprint(F("Could not update rain data, unexpected response: "));
//     //     RPprintln(status);
//     //     return false;
//     // }

//     // // Skip HTTP headers
//     // char endOfHeaders[] = "\r\n\r\n";
//     // if (!client_asdasdasd.find(endOfHeaders))
//     // {
//     //     RPprintln(F("Could not update rain data, invalid response"));
//     //     return false;
//     // }

//     // if(!filterData1234567890())
//     // {
//     //     RPprintln("Could not update rain data, could not filter data");
//     //     return false;
//     // }

//     // client_asdasdasd.stop();
//     // return true;
// }

// bool filterData1234567890()
// {
//     // if (!readResponseUntil1234567890(F("<caption>Dados meteorológicos das últimas 12 horas</caption>")))
//     //     return false;

//     // if (!readResponseUntil1234567890("<tbody>"))
//     //     return false;

//     // String data;
//     // if (!readResponseUntilAndSaveToString1234567890("</tbody>", &data))
//     //     return false;

//     // while(data.indexOf("\r") != -1) data.replace("\r", "");
//     // while(data.indexOf("\n") != -1) data.replace("\n", "");
//     // while(data.indexOf(" <") != -1) data.replace(" <", "<");
//     // while(data.indexOf("</tbody>") != -1) data.replace("</tbody>", "");
    
//     // unsigned int temp0, temp1, temp2;
//     // temp0 = 0;
//     // while(data.indexOf("<tr><td>", temp0) != -1)
//     // {    
//     //     temp1 = data.indexOf("<tr><td>", temp0)+8;
//     //     temp2 = data.indexOf("</td>", temp1);
//     //     String time = data.substring(temp1, temp2);
        
//     //     for(int i = 0; i < 3; i++){
//     //         temp1 = temp2+9;
//     //         temp2 = data.indexOf("</td>", temp1);
//     //     }
//     //     temp0 = temp2;

//     //     String rain = data.substring(temp1, temp2);


//     //     byte second, minute, hour, day, month; int year;

//     //     time = time.substring(11) + ":00 "+time.substring(0, 10);

//     //     if(parseTime(time, second, minute, hour, day, month, year))
//     //     {
//     //         DateTime dt(year, month, day, hour, minute, second);
//     //         unsigned int dt_unix = dt.unixtime();

//     //         rainData_t1234567890 newRain;
//     //         newRain.unixtime = dt_unix;
//     //         rain.replace(",", ".");
//     //         newRain.rain = rain.toDouble();

//     //         // check if reading already is in vector rainData1234567890
//     //         auto it = std::find_if(rainData1234567890.begin(), rainData1234567890.end(),
//     //             [dt_unix](const rainData_t1234567890& element) {
//     //                 return element.unixtime == dt_unix;
//     //             }
//     //         );
//     //         if (it == rainData1234567890.end()) // if not found
//     //         {
//     //             rainData1234567890.push_back(newRain);
//     //         }
//     //     }
//     // }
    
//     // return true;
// }

// bool readResponseUntilAndSaveToString1234567890(String searchString, String* savedString)
// {
//     // bool foundString = false;

//     // if(savedString != nullptr) *savedString = "";

//     // if(!client_asdasdasd.available()) return false;

//     // do {
//     //     int i = 0;
       
//     //     while (i < searchString.length() && client_asdasdasd.available()) {
//     //         char nextChar;
//     //         client_asdasdasd.readBytes(&nextChar, 1);
//     //         if(savedString != nullptr) *savedString += nextChar;

//     //         if (nextChar == searchString[i]) i++;
//     //         else i = 0;
//     //     }
        
//     //     if (i == searchString.length()) {
//     //         foundString = true;
//     //         break;
//     //     }
//     // }
//     // while (client_asdasdasd.available());

//     // return foundString;
// }

// bool readResponseUntil1234567890(String searchString)
// {
//     return readResponseUntilAndSaveToString1234567890(searchString, nullptr);
// }

// void printRainData1234567890()
// {
//     RPprintln("Rain data: ");
//     for (int i = 0; i < rainData1234567890.size(); i++)
//     {
//         RPprint(rainData1234567890[i].unixtime);
//         RPprint(" - ");
//         RPprintln(rainData1234567890[i].rain);
//     }
    
//     RPprint("\nTotal rain: ");
//     RPprintln(sumRainFromData1234567890());
// }

// void filterOutOldData1234567890()
// {
//     for (int i = 0; i < rainData1234567890.size(); i++)
//     {
//         double dataAge = ((double)(getTime()-rainData1234567890[i].unixtime))/3600;
//         if(dataAge > maxRainDataAge1234567890)
//         {
//             rainData1234567890.erase(rainData1234567890.begin() + i);
//             i--;
//         }
//     }
// }

// unsigned int sumRainFromData1234567890()
// {
//     unsigned int sum = 0;

//     for (int i = 0; i < rainData1234567890.size(); i++)
//     {
//         sum += rainData1234567890[i].rain;
//     }
    
//     return sum;
// }

// bool isAlreadyMoist1234567890()
// {
//     filterOutOldData1234567890();
//     return sumRainFromData1234567890() >= milimetersOfRainToConsiderMoist1234567890;
// }